Lecture 1:
Fetching the create API in the view::
--the create method will be used in the new course form view to submit the user-entered
course details to the backend to create a new course in the database

The NewCourse component::
--In order to allow educators to create new courses, we will add a React component
that contains a form to the frontend of the application.

--The form will contain an option to upload the course image, input fields for entering
the course Name, Description, and Category; and the SUBMIT button, which will
save the details that have been entered into the database.

--The NewCourse component can only be viewed by a signed-in user who is also an
educator. So, we will add a PrivateRoute to the MainRouter component, which
will render this form only for authorized users at /teach/course/new.

Lecture 2:
Listing courses by educator
---Authorized educators will be able to see a list of the courses that they have created on
the platform.

The list course API::
---To process the :userId param in the route and retrieve the associated user from the
database, we will utilize the userByID method in our user controller

The MyCourses component::
--In the MyCourses component, we will render the list of courses in a Material-UI
List, after fetching the data from the server using the listByInstructor API. This
component, as pictured in the following image, will function as the educator's
dashboard, where their courses are listed and they have an option to add new
courses:

Lecture 3:
Display a course
--Users on the MERN Classroom application, including visitors, signed-in students,
and educators alike, will all be able to browse through course pages, with interactions
that are specific to their authorization level.

A read course API::
--In order to implement a read course API in the backend, we will start by declaring the
GET route and the parameter-handling trigger,

The Course component::
--The Course component will render the individual course-specific details and user
interactions,
The completed Course component will contain the following parts:::
***A section showing course details, which is visible to all visitors to this page.
We will implement this part in this section.
***A Lessons section, which contains a list of lessons and is visible to all
visitors, and the option to add a new lesson, which will be visible only to
the instructor of this course. We will implement the lessons part in the next
section.
***Edit, delete, and publish options, which are visible only to the instructor.
This will be discussed later in the chapter.
***An Enroll option, not pictured in the previous image, which will only be
visible after the course has been published by the instructor. This will be
implemented later in the chapter.

--we will first retrieve the
course details with a fetch call to the read API in a useEffect hook,

--In order to load this Course component in the frontend, we will add a route to
MainRouter as follows:

--This route URL (/course/:courseId) can now be added into any component to link
to a specific course, with the :courseId param replaced with the course's ID value

Lecture 4:
Updating courses with lessons::
---Each course in the MERN Classroom will contain a list of lessons that make up the
course content and what the students need to cover when they enroll.
---putting more emphasis on the implementation of managing lessons and allowing students to go through lessons in
order to complete a course.

Storing lessons::
--We need to define the lesson data structure and associate it with the course data
structure before we can store and retrieve lesson details for each course.

--defining the Lesson model, with a schema containing the title, the
content, and the resource URL fields of the string type
--To
integrate lessons with the course structure, we will add a field called lessons in the
Course model, which will store an array of lesson documents,

Adding new lessons::
---Educators on the MERN Classroom application will be able to add new lessons to the
courses that they are still building and have not yet published.
--first by implementing a backend API that
adds lessons to an existing course, then by creating a frontend form view for entering
and sending the new lesson details, and finally, by displaying the newly added
lessons on the Course page.

Adding a lesson API::
--backend API that will allow us to add and store new lessons
for a given course, we first need to declare a PUT route as follows:

--When this route gets a PUT request with the course ID in the URL, we will first use the
isInstructor method to check whether the current user is the instructor for the
course, and then we will save the lesson in the database with the newLesson method.

-In order to access this API to add a new lesson in the frontend, you will also need to
add a corresponding fetch method, as we did for other API implementations.
This API will be used in a form-based component that will take input from the user
for each new lesson and then send it to the backend

The NewLesson component::
--In each course, while it is still unpublished, the instructor will be able to add a lesson
by filling out a form.

--The NewLesson component will receive the courseId value and an addLesson
function as props from the parent component to which it will be added;

--We make these required props by adding PropTypes
validation to NewLesson.
--These props will be needed in this component when the
form is submitted.

Displaying lessons:;
--The lessons for a specific course will be rendered in a list—along with a tally of the
total number of lessons—on the Course page below the other course

